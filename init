#!/usr/bin/env php
<?php
/**
 * Yii Application Initialization Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --env=Development --overwrite=n
 *
 * @author Alexander Makarov <sam@rmcreative.ru>
 *
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */
if (!extension_loaded('openssl')) {
    die('The OpenSSL PHP extension is required by Yii2.');
}

$params = getParams();

$root = str_replace('\\', '/', __DIR__);

define('SCRIPT_ROOT', $root);

$envs = require(SCRIPT_ROOT . "/environments/index.php");
$envNames = array_keys($envs);

$errorLogs = $environments = [];

echo "Yii Application Initialization Tool v1.0\n\n";

$envName = null;
if (empty($params['env']) || $params['env'] === '1') {
    echo "Which environment do you want the application to be initialized in?\n\n";
    foreach ($envNames as $i => $name) {
        echo "  [$i] $name\n";
    }
    echo "\n  Your choice [0-" . (count($envs) - 1) . ', or "q" to quit] ';
    $answer = trim(fgets(STDIN));

    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }

    if (isset($envNames[$answer])) {
        $envName = $envNames[$answer];
    }
} else {
    $envName = $params['env'];
}

if (!in_array($envName, $envNames)) {
    $envsList = implode(', ', $envNames);
    echo "\n  $envName is not a valid environment. Try one of the following: $envsList. \n";
    exit(2);
}

$env = $envs[$envName];

if (empty($params['env'])) {
    echo "\n  Initialize the application under '{$envNames[$answer]}' environment? [yes|no] ";
    $answer = trim(fgets(STDIN));
    if (strncasecmp($answer, 'y', 1)) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }
}

$environments = getEnvironments();

// choice files


echo "\n  Start initialization ...\n\n";
$files = getFileList(SCRIPT_ROOT . "/environments/{$env['path']}");
if (isset($env['skipFiles'])) {
    $skipFiles = $env['skipFiles'];
    array_walk($skipFiles, function(&$value) use($env) {
        $value = SCRIPT_ROOT . "/$value";
    });
    $files = array_diff($files, array_intersect_key($env['skipFiles'], array_filter($skipFiles, 'file_exists')));
}
$all = false;
foreach ($files as $file) {

    if (!copyFile(SCRIPT_ROOT, "environments/{$env['path']}/$file", $file, $all, $params, $errorLogs, $environments)) {
        break;
    }
}

$callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable', 'createSymlink'];
foreach ($callbacks as $callback) {
    if (!empty($env[$callback])) {
        $callback(SCRIPT_ROOT, $env[$callback]);
    }
}

echo "\n  ... initialization completed.\n\n";

showErrorsAfterInit($errorLogs);

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params, &$errorLogs, $environments = [])
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }

    $contentSource = preg_replace_callback(
        "/\{\{([\w]+)\}\}/",
        function($matches) use (&$errorLogs, $environments) {
            if (is_array($matches) && isset($matches[1]) && isset($environments[$matches[1]])) {
                return $environments[$matches[1]];
            }
            $errorLogs[] = $matches[0];
            return '';
        }, file_get_contents($root . '/' . $source)
    );

    if (is_file($root . '/' . $target)) {
        $contentTarget = file_get_contents($root . '/' . $target);

        if ($contentSource === $contentTarget) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, $contentSource);
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, $contentSource);
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function setWritable($root, $paths)
{
    foreach ($paths as $writable) {
        if (is_dir("$root/$writable")) {
            echo "      chmod 0777 $writable\n";
            @chmod("$root/$writable", 0777);
        } else {
            echo "\n  Error. Directory $writable does not exist. \n";
        }
    }
}

function setExecutable($root, $paths)
{
    foreach ($paths as $executable) {
        echo "      chmod 0755 $executable\n";
        @chmod("$root/$executable", 0755);
    }
}

function setCookieValidationKey($root, $paths)
{
    foreach ($paths as $file) {
        echo "   generate cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = openssl_random_pseudo_bytes($length);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'",
            file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink($root, $links)
{
    foreach ($links as $link => $target) {
        echo "      symlink " . $root . "/" . $target . " " . $root . "/" . $link . "\n";
        //first removing folders to avoid errors if the folder already exists
        @rmdir($root . "/" . $link);
        @symlink($root . "/" . $target, $root . "/" . $link);
    }
}

function getEnvironments()
{
    $files = @glob(SCRIPT_ROOT . '/\.*env');

    if (empty($files)) {
        echo '\n File .env not found \n';
        return [];
    }

    if (count($files) > 1) {
        echo "\n  Please, select file .env for parser: \n";

        foreach ($files as $key => $file) {
            echo "[{$key}] => " . (substr($file, strrpos($file, '/') + 1)) . "\n";
        }
        echo "\n  Your choice [0-" . (count($files) - 1) . ', or "q" to quit] ';
        $answer = trim(fgets(STDIN));

        if ($answer === 'q') {
            echo "\n  Quit initialization.\n";
            exit(0);
        }
    } else {
        $answer = '0';
    }

    if (isset($files[$answer])) {
        try {
            return parse_ini_file($files[$answer]);
        } catch (Exception $e) {
            echo '\n\n Error. ' . $e->getMessage() . '\n\n';
            return [];
        }

    } else {
        echo "\n\n  Wrong answer!!! Try again \n\n";
        return getEnvironments();
    }
}

function showErrorsAfterInit(array $errorLogs)
{
    if (!empty($errorLogs)) {
        echo "\nYour application may not work correctly! \n";
        echo "Next agrument not found: \n";

        foreach ($errorLogs as $error) {
            echo "  {$error}\n";
        }

        echo "Recommended add this agrument"
            . (count($errorLogs) > 1 ? 's' : '')
            . " to your file .env or create file\n";
    }
}
